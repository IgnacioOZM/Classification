## Pregunta 1 ----
# Let us begin with the basics. Create a vector with values 2002, 2004, 2006,
# 2008 using c and seq functions.
a <- c(2002,2004,2006,2008)
b <- seq(2002,2008,by=2)
## Pregunta 2 ----
# Use function length to get the size of the vector.
size <- length(a)
## Pregunta 3 ----
# Try the different methods for selecting the elements of the vector.
a[1]
a[-2]
a[2:4]
a[-(2:3)]
a[c(1,4)]
## Pregunta 1 ----
# Let us begin with the basics. Create a vector with values 2002, 2004, 2006,
# 2008 using c and seq functions.
a <- c(2002,2004,2006,2008)
b <- seq(2002,2008,by=2)
## Pregunta 2 ----
# Use function length to get the size of the vector.
size <- length(a)
## Pregunta 3 ----
# Try the different methods for selecting the elements of the vector.
a[1]
a[-2]
a[2:4]
a[-(2:3)]
a[c(1,4)]
## Pregunta 4 ----
# Load the data set usedcars.csv into a variable named fdata.
fdata <- read.csv('usedcars.csv')
###############################################################################
################################## Práctica 1 #################################
###############################################################################
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
###############################################################################
################################## Práctica 1 #################################
###############################################################################
## Set working directory and clean workspace
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
rm(list = ls())
cat("\014")
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_1_1_R/practica_1_1.R', echo=TRUE)
## Pregunta 2 ----
# Use function length to get the size of the vector.
size <- length(a)
## Pregunta 3 ----
# Try the different methods for selecting the elements of the vector.
a[1]
a[-2]
a[2:4]
a[-(2:3)]
a[c(1,4)]
## Pregunta 4 ----
# Load the data set usedcars.csv into a variable named fdata.
fdata <- read.csv('usedcars.csv')
## Pregunta 5 ----
# Use str and summary functions on fdata. What types of variables are in the
# dataset? What are the average values of the numeric variables?
str(fdata)
summary(fdata)
## Pregunta 5 ----
# Use str and summary functions on fdata. What types of variables are in the
# dataset? What are the average values of the numeric variables?
str(fdata)
summary(fdata)
## Pregunta 6 ----
# Use View and head functions on fdata.
View(fdata)
head(fdata)
## Pregunta 7 ----
# Access the elements number 5 to 20 of variable color
fdata[5:20,'color']
## Pregunta 8 ----
# Create a new dataset removing row numbers 10 and 100.
fdata2 <- fdata[-(10:100),]
View(fdata2)
## Pregunta 9 ----
# Create a new dataset only with columns year, price and mileage.
fdata3 <- fdata[,c('year','price','mileage')]
## Pregunta 10 ----
# Obtain statistics for variables year and price.
y <- fdata[,'year']
x <- fdata[,'price']
m1 <- lm(y ~ x)
m2 <- glm(y ~ x)
summary(m2)
summary(m1)
summary(m2)
t.test(x,y)
pairwise.t.test(x,y)
prop.test(y,x)
aov(y ~ x)
## Pregunta 11 ----
# Use function by() to calculate statistics filtering by classes.
by(fdata,fdata[,'year'], summary)
by(fdata,fdata$year,function(x) mean(x$price))
## Pregunta 12 ----
#Filter from this dataset the rows that have a year that matches the values
# of the vector created in step 1.
filter <- fdata[fdata$year %in% a,]
## Pregunta 13 ----
# Create a new column in the dataset named PM resulting from multiplying the
# values of price and mileage in each row.
fdata$PM <- fdata$year * fdata$mileage
## Pregunta 14 ----
# Plot the price values with a solid line.
plot(fdata$price,type = 'l')
## Pregunta 15 ----
# Plot a scatterplot between variables mileage (x axis) and price (y axis).
plot(fdata$mileage,fdata$price, type = 'p')
## Pregunta 16 ----
# Plot a boxplot of mileage values
boxplot (fdata$mileage)
## Pregunta 17 ----
# Plot a histogram of the prices data.
plot(fdata$price, type = 'h')
## Cuestion 1 ----
# Which is the mean price for green cars?
by(fdata,fdata$color,function(x) mean(x$price))
## Cuestion 1 ----
# Which is the mean price for green cars?
by(fdata,fdata$color,function(x) mean(x$price))
## Cuestion 2 ----
# Which is the color of the car located in the 20th row of the dataset
# usedcars.csv?
fdata[20,]
## Cuestion 3 ----
# How many cars are listed before year 2010?
filter <- fdata[fdata$year < 2010,]
## Cuestion 4 ----
# Which of these commands does NOT produce an scatterplot of variables price
# and mileage?
plot(y = fdata$mileage,x = fdata$price)
plot(x = fdata[,'price'], y = fdata[,'mileage'])
## Cuestion 4 ----
# Which of these commands does NOT produce an scatterplot of variables price
# and mileage?
plot(y = fdata$mileage,x = fdata$price)
plot(x = fdata[,'price'], y = fdata[,'mileage'])
plot(x = fdata$price, y = fdata$mileage)
plot(x = fdata[,price], y = fdata[,mileage])
plot(x = fdata$price, y = fdata$mileage)
plot(x = fdata[,'price'], y = fdata[,'mileage'])
## Cuestion 4 ----
# Which of these commands does NOT produce an scatterplot of variables price
# and mileage?
plot(y = fdata$mileage,x = fdata$price)
plot(x = fdata$price, y = fdata$mileage)
plot(x = fdata[,price], y = fdata[,mileage])
plot(x = fdata$price, y = fdata$mileage)
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_1_2_R/Practica_1_2.R', echo=TRUE)
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_1_2_R/Practica_1_2.R', echo=TRUE)
library(dplyr)        # Contains functions to manipulate datasets
library(naniar)       # Contains functions to visualize missing values
library(simputation)  # Contains functions to fill missing values
library(ggplot2)      # Contains functions to plot data
library(plotly)       # Contains functions to make interactive plots
library(GGally)       # Contains function ggpairs
SimData <- read.table(file = "SimData7.csv", #Name of text file.
sep = ";",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
#See structure
str(SimData)
#Print first few rows
head(SimData)
#Set as factor if necessary
SimData <- SimData %>%
mutate(Y = as.factor(Y))
# Missing values
gg_miss_var(SimData)
vis_miss(SimData)
# Missing values
gg_miss_var(SimData)
SimData <- SimData %>% na.omit()
summary(SimData)
## Pregunta 2 ----
# Use ggplot2 for plotting a 2D scatterplot of the data. If Y is categorical,
# make sure to change the color or the shape of the data depending on the
# values of Y.
ggplot(SimData) + geom_point(aes(x = X1, y = X2, color = Y))
ggplot(SimData) + geom_histogram(aes(x=Y),stat="count")
## Pregunta 2 ----
# Use ggplot2 for plotting a 2D scatterplot of the data. If Y is categorical,
# make sure to change the color or the shape of the data depending on the
# values of Y.
ggplot(SimData) + geom_point(aes(x = X1, y = X2, color = Y))
ggplotly()
ggplot(SimData) + geom_histogram(aes(x=Y),stat="count")
ggpairs(SimData)
ggpairs(SimData, aes(color=Y,alpha=0.4))
ggpairs(SimData)
ggpairs(SimData, aes(color=Y,alpha=0.4))
ggpairs(SimData, aes(color=Y,alpha=0.1))
ggpairs(SimData, aes(color=Y,alpha=0.4))
## Cuestion 1 ----
# Which datasets contain NA/missing values?
SimData <- read.table(file = "SimData2.csv", #Name of text file.
sep = ";",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
# Missing values
gg_miss_var(SimData)
vis_miss(SimData)
## Cuestion 2 ----
# Which is the type of problem that corresponds to dataset SimData4.csv?
# Can you express the solution mathematically?
SimData <- read.table(file = "SimData4.csv", #Name of text file.
sep = ";",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
#Set as factor if necessary
SimData <- SimData %>%
mutate(Y = as.factor(Y))
# Plotting of data
ggplot(SimData) + geom_point(aes(x = X1, y = X2, color = Y))
## Cuestion 3 ----
# Which is the type of problem that corresponds to dataset SimData3.csv?
# Does it contain any outliers?
SimData <- read.table(file = "SimData3.csv", #Name of text file.
sep = ";",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
# Plotting of data
ggplot(SimData) + geom_point(aes(x = X1, y = Y))
## Cuestion 4 ----
# Identify the type of problem of dataset SimData7.csv
SimData <- read.table(file = "SimData7.csv", #Name of text file.
sep = ";",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
# Plotting of data
ggplot(SimData) + geom_point(aes(x = X1, y = X2, color = Y))
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_1_2_R/Practica_1_2.R', echo=TRUE)
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_2_1_Classification/Example_DataWrangling.R', echo=TRUE)
#See structure
str(Titanic)
#Print first few rows
head(Titanic)
# summarize the data read to explore range of values and missing data.
summary(Titanic)
#"Name" is character, but should not be considered as categorical data.
#"PClass" and "Sex" are character variables, but they only contain a small number of classes
unique(Titanic$PClass) #unique function returns a vector with duplicate elements removed
table(Titanic$Sex) #table counts unique elements.
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>%
mutate(PClass = as.factor(PClass),
Sex = as.factor(Sex))
str(Titanic) #Labels are created
summary(Titanic) #Summary gives the number of cases
#Contingency table
table(Titanic$PClass, Titanic$Sex)
#"Survived" and "SexCode" are numerical variables, but they only contain a small number of classes
table(Titanic$Survived)
table(Titanic$SexCode)
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>% mutate(Survived = as.factor(Survived))
str(Titanic)
#some functions do not admit names of factors starting with numbers. We can change the factor names:
levels(Titanic$Survived) <- c("NO","YES")
str(Titanic)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(SexCode, "F","M")))
str(Titanic)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(SexCode, "F","M")))
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(Sex, "F","M")))
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(Sex= as.factor(ifelse(Sex, "F","M")))
## Set working directory and clean workspace
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
rm(list = ls())
cat("\014")
## Load Titanic dataset --------------------------------------------------------
# read.table is a function that allows to read multiple kinds of text files. It admits the following arguments:
Titanic <- read.table(file = "Titanic.csv", #Name of text file.
sep = ",",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
#See structure
str(Titanic)
#Print first few rows
head(Titanic)
# summarize the data read to explore range of values and missing data.
summary(Titanic)
#"Name" is character, but should not be considered as categorical data.
#"PClass" and "Sex" are character variables, but they only contain a small number of classes
unique(Titanic$PClass) #unique function returns a vector with duplicate elements removed
table(Titanic$Sex) #table counts unique elements.
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>%
mutate(PClass = as.factor(PClass),
Sex = as.factor(Sex))
str(Titanic) #Labels are created
summary(Titanic) #Summary gives the number of cases
#Contingency table
table(Titanic$PClass, Titanic$Sex)
#"Survived" and "SexCode" are numerical variables, but they only contain a small number of classes
table(Titanic$Survived)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(SexCode, "F","M")))
str(Titanic)
table(Titanic$SexCode)
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>% mutate(Survived = as.factor(Survived))
str(Titanic)
#some functions do not admit names of factors starting with numbers. We can change the factor names:
levels(Titanic$Survived) <- c("NO","YES")
str(Titanic)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(SexCode, "F","M")))
str(Titanic)
## MISSING VALUES --------------------------------------------------------
## Identify missing values and eliminate those observations from the dataset.
# The summary function provides the number of missing values (if any) found for each variable.
summary(Titanic)
# Variable PClass contains an odd value: "*"
# Lets remove that row
Titanic <- Titanic %>% filter(PClass != "*")
# Functions gg_miss_var and vis_miss can be used to visualize the number of empty values for each variable.
gg_miss_var(Titanic)
# Variable PClass contains an odd value: "*"
# Lets remove that row
Titanic <- Titanic %>% filter(PClass != "*")
# Functions gg_miss_var and vis_miss can be used to visualize the number of empty values for each variable.
gg_miss_var(Titanic)
vis_miss(Titanic)
# Define a new dataset only with correctly observed data
Titanic_noNA <- Titanic %>% filter(!is.na(Age))
# In addition, the function na.omit() directly obtains the dataset without NA in all variables.
Titanic_noNA <- Titanic %>% na.omit()
summary(Titanic_noNA)
# 1. Empty values can be replaced with the mean value of the data
Titanic_noNA_2 <- Titanic %>% mutate(Age = ifelse(is.na(Age),
mean(Age,na.rm = T),
Age))
# 2. Empty values can be replaced with the median of the data, which is more robust than the mean
Titanic_noNA_3 <- Titanic %>% mutate(Age = ifelse(is.na(Age),
median(Age,na.rm = T),
Age))
# 3. A knn model can be used to fill empty values
#    The inputs for the knn model will be variables PClass and Sex
Titanic_noNA_4 <- Titanic %>%
impute_knn(Age ~ PClass + Sex, # Formula: Variables PClass and Sex will be used to fill variable Age empty values
k = 9)              # Number of nearest neighbours used by the model
## BASIC DATA MANIPULATION --------------------------------------------------------
## Create two datasets, one for each passenger sex,
## only with Age, Sex and Survived variables
Titanic_F <- Titanic %>%
filter(Sex == "female") %>%
select(Age,Sex,Survived)
Titanic_M <- Titanic %>%
filter(Sex == "male") %>%
select(Age,Sex,Survived)
## Obtain the number of survivors
## grouping them by passenger sex.
Titanic %>%
filter(Survived == "YES") %>%
group_by(Sex) %>%
summarise(proportion = n())
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Practica_2_1_Classification/Example_ggplot.R', echo=TRUE)
# This example will use the mpg dataset in ggplot2 package
data(mpg)
#Descritption of mpg
?mpg
summary(mpg)
head(mpg)
#Example plot using mpg dataset.
#The car's fuel efficiency on the highway (hwy variable) is plotted as a function of the car's engine displacement (displ variable).
ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy))
