## Install and load libraries --------------------------------------------------
library(dplyr)        # Contains functions to manipulate datasets
library(naniar)       # Contains functions to visualize missing values
library(simputation)  # Contains functions to fill missing values
setwd(x)
## Load Titanic dataset --------------------------------------------------------
# read.table is a function that allows to read multiple kinds of text files. It admits the following arguments:
Titanic <- read.table(file = "Titanic.csv", #Name of text file.
sep = ",",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
#Print first few rows
head(Titanic)
## Set working directory and clean workspace
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
#rm(list = ls())
cat("\014")
#See structure
str(Titanic)
#"Name" is character, but should not be considered as categorical data.
#"PClass" and "Sex" are character variables, but they only contain a small number of classes
unique(Titanic$PClass) #unique function returns a vector with duplicate elements removed
table(Titanic$Sex) #table counts unique elements.
# summarize the data read to explore range of values and missing data.
summary(Titanic)
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>%
mutate(PClass = as.factor(PClass),
Sex = as.factor(Sex))
## Install and load libraries --------------------------------------------------
library(dplyr)        # Contains functions to manipulate datasets
library(naniar)       # Contains functions to visualize missing values
library(simputation)  # Contains functions to fill missing values
## Set working directory and clean workspace
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
#rm(list = ls())
cat("\014")
## Load Titanic dataset --------------------------------------------------------
# read.table is a function that allows to read multiple kinds of text files. It admits the following arguments:
Titanic <- read.table(file = "Titanic.csv", #Name of text file.
sep = ",",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)        #convert string to factors?
#See structure
str(Titanic)
#Print first few rows
head(Titanic)
# summarize the data read to explore range of values and missing data.
summary(Titanic)
#"Name" is character, but should not be considered as categorical data.
#"PClass" and "Sex" are character variables, but they only contain a small number of classes
unique(Titanic$PClass) #unique function returns a vector with duplicate elements removed
table(Titanic$Sex) #table counts unique elements.
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>%
mutate(PClass = as.factor(PClass),
Sex = as.factor(Sex))
str(Titanic) #Labels are created
summary(Titanic) #Summary gives the number of cases
#Contingency table
table(Titanic$PClass, Titanic$Sex)
#"Survived" and "SexCode" are numerical variables, but they only contain a small number of classes
table(Titanic$Survived)
table(Titanic$SexCode)
#Therefore, they should be considered as categorical data.
Titanic <- Titanic %>% mutate(Survived = as.factor(Survived))
str(Titanic)
#some functions do not admit names of factors starting with numbers. We can change the factor names:
levels(Titanic$Survived) <- c("NO","YES")
str(Titanic)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic <- Titanic %>% mutate(SexCode = as.factor(ifelse(SexCode, "F","M")))
str(Titanic)
## MISSING VALUES --------------------------------------------------------
## Identify missing values and eliminate those observations from the dataset.
# The summary function provides the number of missing values (if any) found for each variable.
summary(Titanic)
# Variable PClass contains an odd value: "*"
# Lets remove that row
Titanic <- Titanic %>% filter(PClass != "*")
# Functions gg_miss_var and vis_miss can be used to visualize the number of empty values for each variable.
gg_miss_var(Titanic)
vis_miss(Titanic)
# Define a new dataset only with correctly observed data
Titanic_noNA <- Titanic %>% filter(!is.na(Age))
# In addition, the function na.omit() directly obtains the dataset without NA in all variables.
Titanic_noNA <- Titanic %>% na.omit()
summary(Titanic_noNA)
# 1. Empty values can be replaced with the mean value of the data
Titanic_noNA_2 <- Titanic %>% mutate(Age = ifelse(is.na(Age),
mean(Age,na.rm = T),
Age))
# 2. Empty values can be replaced with the median of the data, which is more robust than the mean
Titanic_noNA_3 <- Titanic %>% mutate(Age = ifelse(is.na(Age),
median(Age,na.rm = T),
Age))
# 3. A knn model can be used to fill empty values
#    The inputs for the knn model will be variables PClass and Sex
Titanic_noNA_4 <- Titanic %>%
impute_knn(Age ~ PClass + Sex, # Formula: Variables PClass and Sex will be used to fill variable Age empty values
k = 9)              # Number of nearest neighbours used by the model
## BASIC DATA MANIPULATION --------------------------------------------------------
## Create two datasets, one for each passenger sex,
## only with Age, Sex and Survived variables
Titanic_F <- Titanic %>%
filter(Sex == "female") %>%
select(Age,Sex,Survived)
Titanic_M <- Titanic %>%
filter(Sex == "male") %>%
select(Age,Sex,Survived)
## Obtain the number of survivors
## grouping them by passenger sex.
Titanic %>%
filter(Survived == "YES") %>%
group_by(Sex) %>%
summarise(proportion = n())
## Load libraries
library(caret)          # La biblia de los paquetes
library(ggplot2)        # La biblia para figuras
library(naniar)         # Contains functions to visualize missing values
library(ROCR)           # For plotting ROC curves.
library(pROC)           # For a comparative analysis of roc curve
library(MLTools)        # Paquete propio de ICAI
# XGBOOST
library(xgboost)        # xgboost library
# Decision trees
library(rpart)          # Decisions trees 1
## Load libraries
library(caret)          # La biblia de los paquetes
library(ggplot2)        # La biblia para figuras
library(naniar)         # Contains functions to visualize missing values
library(ROCR)           # For plotting ROC curves.
library(pROC)           # For a comparative analysis of roc curve
library(MLTools)        # Paquete propio de ICAI
# XGBOOST
library(xgboost)        # xgboost library
# Decision trees
library(rpart)          # Decisions trees 1
library(rpart.plot)     # Decisions trees 2
library(partykit)       # Decisions trees 3
# Bagging & Random Forest
library(randomForest)   # Random forest and bagging library
# MLP
library(NeuralNetTools) # Useful tools for plotting and analyzing neural networks
library(nnet)           # Neuronal netword
library(NeuralSens)     # Statistical sensitivity analysis
## Set working directory and clean workspace
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
rm(list = ls())
cat("\014")
################################################################################
##########################    Data analysis   ##################################
################################################################################
cat("
##############################################################################
##########################    Data Analysis   ################################
##############################################################################",
"\n")
# Load of data
fdata <- read.table(file = "cardioMod4.csv",
sep = ";",
header = TRUE,
na.strings = "NA",
stringsAsFactors = FALSE)
# Analizando el .csv observamos que hay múltiples datos que se deben de
# considerar como factores (Gender, Cholesterol, Gluc, ...)
fdata$gender <- as.factor(fdata$gender)
levels(fdata$gender) <- c("Female", "Male")
fdata$cholesterol <- as.factor(fdata$cholesterol)
levels(fdata$cholesterol) <- c("Normal", "High", "Very High")
fdata$gluc <- as.factor(fdata$gluc)
levels(fdata$gluc) <- c("Normal", "High", "Very High")
fdata$smoke <- as.factor(fdata$smoke)
levels(fdata$smoke) <- c("No", "Yes")
fdata$alco <- as.factor(fdata$alco)
levels(fdata$alco) <- c("No", "Yes")
fdata$active <- as.factor(fdata$active)
levels(fdata$active) <- c("No", "Yes")
fdata$cardio <- as.factor(fdata$cardio)
levels(fdata$cardio) <- c("No", "Yes")
## Análisis detallado de cada categoría para detectar outliers
# Age  -  Se han elminidao 39 outliers con valor -1
ggplot(fdata, aes(x=age)) + geom_boxplot(outlier.colour="red",
outlier.shape=3, outlier.size=2)
fdata <- fdata[which(fdata$age > 0),]
outliers_age <- c()
ggplot(fdata) + geom_histogram(aes(x = age, fill = cardio),bins = 15)
# Gender - No presenta outliers por ser factor y no faltan datos
unique(fdata$gender)
ggplot(fdata) + geom_bar(aes(x = gender, fill = cardio))
# Height  -  Eliminamos todos los datos que esten por denajo de 140
ggplot(fdata, aes(x=height)) + geom_boxplot(outlier.colour="red",
outlier.shape=3, outlier.size=2)
fdata <- fdata[fdata$height > 140,]
outliers_height <- boxplot(fdata$height, plot=FALSE)$out
ggplot(fdata) + geom_histogram(aes(x = height, fill = cardio),bins = 15)
# Weight  -  Consideramos que este puede ser un factor importante y los
# outliers pueden afectar. Pesos extremos presentan un riesgo para la salud.
# Por ello dejamos los outliers.
ggplot(fdata, aes(x=weight)) + geom_boxplot(outlier.colour="red",
outlier.shape=3, outlier.size=2)
outliers_weight <- boxplot(fdata$weight, plot=FALSE)$out
ggplot(fdata) + geom_histogram(aes(x = weight, fill = cardio),bins = 10)
outliers_ap_hi <- boxplot(fdata$ap_hi, plot=FALSE)$out
ggplot(fdata) + geom_histogram(aes(x = ap_hi, fill = cardio),bins = 10)
# ap_hi  -  Consideramos que este puede ser un factor importante y los
# outliers pueden afectar. Pesos extremos presentan un riesgo para la salud.
# Por ello dejamos los outliers.
ggplot(fdata, aes(x=ap_hi)) + geom_boxplot(outlier.colour="red",
outlier.shape=3, outlier.size=2)
outliers_ap_lo <- boxplot(fdata$ap_lo, plot=FALSE)$out
ggplot(fdata) + geom_histogram(aes(x = ap_lo, fill = cardio),bins = 10)
# ap_lo  -  Consideramos que este puede ser un factor importante y los
# outliers pueden afectar. Pesos extremos presentan un riesgo para la salud.
# Por ello dejamos los outliers. No tengo del todo claro que 140 sea posible.
ggplot(fdata, aes(x=ap_lo)) + geom_boxplot(outlier.colour="red",
outlier.shape=3, outlier.size=2)
ggplot(fdata) + geom_bar(aes(x = cholesterol, fill = cardio))
ggplot(fdata) + geom_bar(aes(x = gluc, fill = cardio))
# cholesterol - No presenta outliers por ser factor y no faltan datos
unique(fdata$cholesterol)
# gluc - Presenta outliers por ser factor y faltan datos
unique(fdata$gluc)
